def solution(n):
    # 1. n x n 2차원 배열 생성
    res = [[0] * i for i in range(1, n + 1)]

    # 2. 반시계 방향의 (시작은 아래로) 나선형으로 배열을 채워 나간다.
    y, x = -1, 0     # 처음에 y = 0, x = 0으로 시작해야 하기 때문에 y는 -1, x는 0으로 초기화 (아래 코드에 의해 y는 1이 증가할 것임.)
    num = 1

    for i in range(n):     # n이 4일 경우, i에는 0, 1, 2, 3이 할당됨.
        for _ in range(i, n):     # n이 4일 경우 순서대로 4번, 3번, 2번, 1번 반복문이 돔.
            angle = i % 3     # 방향을 결정하는 변수 angle 정의
            # 순서대로 아래 -> 오른쪽 -> 위 (반시계 나선형)
            if angle == 0: y += 1     # angle이 0이면 아래로 향해야 하므로 y를 1 증가시킨다. (x는 그대로)
            elif angle == 1: x += 1     # angle이 1이면 오른쪽으로 향해야 하므로 x를 1 증가시킨다. (y는 그대로)
            elif angle == 2: y -= 1; x -= 1     # angle이 2이면 왼쪽 대각선 위쪽으로 향해야 하므로 y와 x 모두 1 감소시킨다.
            res[y][x] = num     # 숫자 할당
            num += 1     # 숫자 증가
        # 위와 같은 방식으로 진행하면 앞의 코드처럼 충돌을 감지할 필요가 없어진다.

    # 3. 삼각형 배열을 모두 채우면 배열을 1차원으로 만들어서 정답을 제출한다.
    return [i for j in res for i in j]
            