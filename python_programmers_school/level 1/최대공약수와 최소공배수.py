def solution(n, m):
    small = min(n, m)
    GCD = 0     # 최대공약수
    for i in [small-i for i in range(small)]:     # python에서 range(1, small, -1) 이렇게 적으면 원하는 범위가 나오지 않음. 범위에 음수가 포함될 때만 step 부분에 음수를 써줄 수 있음. (항상 첫 번째 인자가 두 번째 인자보다 커야함.)
        if n % i == 0 and m % i == 0:
            GCD = i
            break
    LCM = GCD * (n / GCD) * (m / GCD)     # 최소공배수 (수학문제 풀 때 푸는 방식대로 최소공배수를 이용해서 식을 만들어줌)
    return [GCD, LCM]
print(solution(2, 5))

# 유클리드 호제법을 이용한 간단한 풀이
# def gcdlcm(a, b):
#     c,d = max(a, b), min(a, b)     --> c는 더 큰 수, d는 더 작은 수
#     t = 1     --> t는 일단 1로 초기화
#     while t>0:     --> t가 0보다 클 때 까지만 아래 반복문 실행
#         t = c%d     --> t는 c에서 d를 나눈 나머지로 변경 (더 큰 수를 더 작은 수로 나머지가 0이 될 때까지 나눈다.)
#         c, d = d, t     --> c는 항상 d로, d는 항상 나머지 t로 변환 (c가 항상 d보다 더 크다.)
#     answer = [ c, int (a*b/c)]     --> 최소공배수는 입력된 두 수를 곱한 값을 최대공약수로 나누면 구해진다. (내가 작성한 LCM 식을 줄이면 옆과 같이 됨.)
#     return answer

# 유클리드 호제법 ex)
# 1071과 1029의 최대공약수를 구하면,
# 1071은 1029로 나누어 떨어지지 않기 때문에, 1071을 1029로 나눈 나머지를 구한다. ≫ 42
# 1029는 42로 나누어 떨어지지 않기 때문에, 1029를 42로 나눈 나머지를 구한다. ≫ 21
# 42는 21로 나누어 떨어진다.