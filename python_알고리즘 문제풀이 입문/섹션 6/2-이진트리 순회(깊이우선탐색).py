# 재귀를 이용하여 깊이우선탐색(DFS)을 배워보자.
# 기본적으로 부모 노드에서 말단 노드까지(위에서 아래) 탐색을 하되 더 이상 들어갈 곳이 없으면 한 칸 백해서 다시 탐색하기
# 1. 전위순회 : 함수 본연의 일(값 print하기, back하기 등)을 처리하고 왼쪽 자식 노드 탐색, 오른쪽 자식 노드 탐색 등을 순서에 맞게 진행 
#               결과적으로 부모 노드 -> 왼쪽 자식 노드 -> 오른쪽 자식 노드 순으로 값이 출력됨.
# 2. 중위순회 : 결과적으로 왼쪽 자식 노드 -> 부모 노드 -> 오른쪽 자식 노드 순으로 값이 출력됨.
# 3. 후위순회 : 결과적으로 왼쪽 자식 노드 -> 오른쪽 자식 노드 -> 부모 노드 순으로 값이 출력됨.


# 전위순회방식 (DFS 완전탐색 문제풀이 시 자주 사용하는 방법)
def DFS(v):
    if v > 7:     # 노드값이 7까지 있으므로 계산 과정에서 v가 7보다 커지면 종료
        return
    else:
        print(v, end=' ')     # DFS 함수의 본연의 일
        DFS(v*2)     # 현재 노드 기준 바로 아래의 왼쪽 노드(항상 현재 노드값의 2배이다.) 호출 
        DFS(v*2+1)     # 현재 노드 기준 바로 아래의 오른쪽 노드(항상 현재 노드값의 2배 +1이다.) 호출

DFS(1)


# 중위순회방식 (거의 쓰이지 않음.)
def DFS(v):
    if v > 7:
        return
    else:
        DFS(v*2)     # 현재 노드 기준 왼쪽 자식 노드 호출
        print(v, end=' ')     # 함수 본연의 일 (왼쪽 자식 먼저 처리 후 부모(자기 자신)는 중간에서 처리)
        DFS(v*2+1)     # 현재 노드 기준 오른쪽 자식 노드 호출

DFS(1)


# 후위순회방식 (대표적으로 병합정렬이 있다.)
def DFS(v):
    if v > 7:
        return
    else:
        DFS(v*2)     # 왼쪽 자식 노드 다 처리
        DFS(v*2+1)     # 오른쪽 자식 노드 다 처리
        print(v, end=' ')     # 마지막으로 부모 처리

DFS(1)